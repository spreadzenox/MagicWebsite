<?php

namespace App\Entity;

use App\Repository\PaquetRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use PhpParser\Node\Stmt\Foreach_;

#[ORM\Entity(repositoryClass: PaquetRepository::class)]
class Paquet
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\ManyToMany(mappedBy: 'paquet', targetEntity: Carte::class)]
    private Collection $items;

    #[ORM\ManyToOne(inversedBy: 'paquets')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $user = null;

    #[ORM\Column]
    private ?bool $publique = null;

    public function __construct()
    {
        $this->items = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return Collection<int, Carte>
     */
    public function getItems(): Collection
    {
        return $this->items;
    }

    public function addItem(Carte $item): static
    {
        if (!$this->items->contains($item)) {
            $this->items->add($item);
            $item->setPaquet($this);
        }

        return $this;
    }

    public function removeItem(Carte $item): static
    {
        if ($this->items->removeElement($item)) {
            // set the owning side to null (unless already changed)
            if ($item->getPaquet() === $this) {
                $item->setPaquet(null);
            }
        }

        return $this;
    }
    public function __toString() : string
    {   
        return $this->description;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): static
    {
        $this->user = $user;

        return $this;
    }

    public function isPublique(): ?bool
    {
        return $this->publique;
    }

    public function setPublique(bool $publique): static
    {
        $this->publique = $publique;

        return $this;
    }
}
