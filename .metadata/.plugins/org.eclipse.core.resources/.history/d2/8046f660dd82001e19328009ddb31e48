<?php

namespace App\DataFixtures;

use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use App\Entity\Paquet;
use App\Entity\Carte;
use App\Entity\User;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use phpDocumentor\Reflection\PseudoTypes\False_;

class AppFixtures extends Fixture
{
    private UserPasswordHasherInterface $hasher;
    
    public function __construct(UserPasswordHasherInterface $hasher)
    {
        $this->hasher = $hasher;
    }
    
    public function load(ObjectManager $manager): void
    {
        // $product = new Product();
        // $manager->persist($product);
        $this->loadMembers($manager);
        

        $manager->flush();
    }
    private function loadMembers(ObjectManager $manager)
    {
        foreach ($this->getMemberData() as [$pseudo,$mail,$plainPassword,$role]){
            $membre = new User();
            $membre->setEmail($mail);
            $membre->setPseudo($pseudo);
            $password = $this->hasher->hashPassword($membre, $plainPassword);
            $membre->setPassword($password);
            $roles = array();
            $roles[] = $role;
            $membre->setRoles($roles);
            $manager->persist($membre);
            foreach ($this->getPaquetsData() as [$descriptionpaquet,$nom_proprio,$isPublic]) {
                if ($nom_proprio==$mail){
                    $paquet = new Paquet();
                    $paquet->setDescription($descriptionpaquet);
                    $paquet->setUser($membre);
                    $paquet->setPublique($isPublic);
                    $manager->persist($paquet);
                    $membre->addPaquet($paquet);
                    $manager->persist($membre);
                    foreach ($this->getCartesData() as [$nom,$DescriptionInventaire,$attaque,$defense,$pouvoir]) {
                        if ($DescriptionInventaire==$descriptionpaquet){
                            $carte = new Carte();
                            $carte->setNom($nom);
                            $carte->setAttaque($Attaque);
                            $carte->setDefense($defense);
                            $carte->setPaquet($paquet);
                            $carte->setProprietaire($paquet->getUser());
                            $paquet->addItem($carte);
                            $manager->persist($carte);
                            $manager->persist($paquet);
                        }
                        $manager->flush();
                    }
                }
            }
        }
        
    }
    private function getPaquetsData()
    {
        // todo = [title, completed];
        yield ['Vieilles cartes moisies','chris@localhost',False];
        yield ['Deck compliqué','chris@localhost',True];
        yield ['Starter Deck','alice@localhost',True];
        yield ['Deck volé à simon le drogué','simon@localhost',True];
        
    }
    private function getCartesData()
    {
        // todo = [title, completed];
        yield ['Le simon démoniaque','Vieilles cartes moisies',4,4,"Initiative"];
        yield ['Alice au pays des bouteilles','Deck compliqué',2,2,"Vol"];
        yield ['Bob le bricobeurre','Deck volé à simon le drogué',5,5,"Piétinement"];
        yield ['Reine des Escalation','Starter Deck',12,8,"Piétinement, Cette carte est sacrifié après 3 tours"];
        
    }
    
    private function getMemberData()
    {
        yield ['Christorigolo','chris@localhost',
            'chris',
            'ROLE_USER'];
        yield ['xX_Aldu91_Xx','alice@localhost','alice','ROLE_USER'];
        yield ['InYarFace','simon@localhost','simon','ROLE_ADMIN'];
        
    }
    
}
